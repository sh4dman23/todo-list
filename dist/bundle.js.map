{"version":3,"file":"bundle.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,aAAa;AACb,CAAC;;AAED,mDAAe,WAAW;;ACzKkB;;AAE5C,qBAAqB,YAAW,C","sources":["webpack://todo-list/./src/todo-manager.js","webpack://todo-list/./src/main.js"],"sourcesContent":["/*\n    The first 3 functions below are responsible for creating and\n    returning Todo items, sections and projects respectively\n    Note for future: properties can be skipped by the spread operator\n        ex: exampleItem.update(...Array(3), 'high'); will only update the priority\n*/\n\nfunction createTodoItem(title, description = '', dueDate, priority = 'low') {\n    const update = (newTitle, newDescription, newDueDate, newPriority, newStatus, newStarredStatus) => {\n        this.title = newTitle !== undefined ? newTitle: this.title;\n        this.description = newDescription !== undefined ? newDescription : this.description;\n        this.dueDate = newDueDate !== undefined ? newDueDate : this.dueDate;\n        this.priority = newPriority !== undefined ? newPriority : this.priority;\n        this.status = newStatus !== undefined ? newStatus : this. status;\n        this.starred = newStarredStatus !== undefined ? newStarredStatus : this.starred;\n    };\n\n    return {\n        title,\n        description,\n        dueDate,\n        priority,\n        note,\n        // status = false means this todo has not been completed\n        status: false,\n        update,\n    };\n}\n\nfunction createSection(name) {\n    const update = newName => {\n        this.name = newName !== undefined ? newName : this.name;\n    };\n\n    return {\n        name,\n        items: [],\n        update,\n    };\n}\n\nfunction createProject(name, description) {\n    // Finds section by name\n    const findSection = sectionName => this.sections.find(section => section.name === sectionName);\n\n    const update = (newName, newDescription) => {\n        this.name = newName !== undefined ? newName : this.name;\n        this.description = newDescription !== undefined ? newDescription : this.description;\n    }\n\n    return {\n        name,\n        description,\n        unlistedItems: [],\n        sections: [],\n        findSection,\n        update,\n    };\n}\n\nfunction checkForEmpty(...args) {\n    args.forEach(arg => {\n        if (arg === undefined || arg === null || arg === '') {\n            return true;\n        }\n    });\n\n    return false;\n}\n\n/*\n    The main ToDo object that stores the todo items.\n    It has:\n        1. a default list for items outside projects (accessible from inbox)\n        2. projects for lists\n            1. in projects, user can create new projects in which they can create lists (called sections)\n\n    In every list, there are\n            1. unlisted items\n            2. sections\n                1. in every section, there are todo items\n*/\n\nconst todoManager = (function() {\n    const toDoObject = {\n        // Projects contains an array of lists each of which has a name, an array of unlisted items,\n        // and a sections array which contains dictionaries containing their names and a list of items\n        projects: [\n            // Default project, accessible from inbox\n            createProject(\n                'default',\n                '',\n            ),\n        ],\n\n        // Finds project by name\n        findProject(projectName) {\n            return this.projects.find(project => project.name === projectName);\n        },\n    };\n\n    const getTodoObject = () => toDoObject;\n\n    // Create the new project and return it\n    const addProject = (name, description) => {\n        const findProject = toDoObject.findProject(name);\n\n        // Project must not exist\n        if (checkForEmpty(name, description) || findProject !== undefined) {\n            return false;\n        }\n\n        const project = createProject(name, description);\n        toDoObject.projects.push(project);\n\n        return project;\n    };\n\n    // Add section and then return it\n    const addSection = (name, projectName = 'default') => {\n        if (checkForEmpty(name)) {\n            return false;\n        }\n\n        const project = toDoObject.findProject(projectName);\n\n        // Project must exist and section must not\n        if (\n            project === undefined ||\n            project.findSection(name) !== undefined\n        ) {\n            return false;\n        }\n\n        const section = createSection(name);\n        project.sections.push(section);\n\n        return section;\n    };\n\n    // Add item and then return it\n    const addTodoItem = (title, description, dueDate, priority, projectName = 'default', sectionName = null) => {\n        const project = toDoObject.findProject(projectName);\n\n        // Project must exist\n        if (checkForEmpty(title, description, dueDate, priority) || project === undefined) {\n            return false;\n        }\n\n        const item = createTodoItem(title, description, dueDate, priority);\n\n        // If section is null, add to unlisted items, else find and then add to that section's item list\n        if (sectionName === null) {\n            project.unlistedItems.push(item);\n        } else {\n            const section = project.findSection(sectionName);\n            if (section === undefined) {\n                return false;\n            }\n\n            section.items.push(item);\n        }\n\n        return item;\n    }\n\n    return { getTodoObject, addProject, addSection, addTodoItem };\n})();\n\nexport default todoManager;","import todoManager from \"./todo-manager.js\";\n\nwindow.todoManager = todoManager;"],"names":[],"sourceRoot":""}